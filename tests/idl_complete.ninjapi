enum UserState {
    ACTIVE,
    INACTIVE,
    BANNED
}

struct UserRequest {
    email: Email
}

struct Name {
    prefix: String (max_length=50),
    first_name: String (max_length=100),
    middle_name: String (max_length=100),
    last_name: String (max_length=100, help='aka. family name'),
    suffix: String (max_length=50),
    full_name: String
}

fieldset NameUpdate for Name {
    prefix?,
    first_name?,
    middle_name?,
    last_name?,
    suffix?
}

struct User {
    id: UUID,
    email: Email,
    name: Name,
    password: String (length=5..64),
    is_admin: Boolean,
}

fieldset UserRead for User {
    id,
    email,
    is_admin,
    full_name
}

fieldset UserWrite for User {
    id,
    email?,
    is_admin?,
    name?,
    password?,
}

struct UserListRequest {
    offset?: Integer (size=32, range=0..inf),
    limit?: Integer (range=1..200)
}

struct UserList {
    count: Integer (
        range=0..0xFFFF
        help='Count of objects returned'
    ),
    users: [User] (max_length=128),
    permissions: {UUID: String} (max_length=128)
}

enum GetError {
    PermissionDenied,
    DoesNotExist
}

enum ListError {
    PermissionDenied
}

operation get_version {
    response: String,


operation user_get {
    in: UserRequest,
    out: User,
    err: GetError
}

operation user_list {
    in: UserListRequest,
    out: UserList,
    err: ListError
}

service server {
    get_version,
    user_get,
    user_list
}

service client {
    get_version
}
